# --------------------------------------------------------------------------
# DOCUMENTATION
# --------------------------------------------------------------------------
"""
Django settings for api project.

Generated by 'django-admin startproject' using Django 4.0.1.

For more information on this file, see
https://docs.djangoproject.com/en/4.0/topics/settings/

For the full list of settings and their values, see
https://docs.djangoproject.com/en/4.0/ref/settings/
"""

# --------------------------------------------------------------------------
# LIRARY
# --------------------------------------------------------------------------
from pathlib import Path
import os
import json


# --------------------------------------------------------------------------
# CONSTANTS
# --------------------------------------------------------------------------
BASE_DIR = Path(__file__).resolve().parent.parent
SYSTEM = "DEV"  # TODO : DEPENDS on implementation

INSTALLED_APPS = [
    "django.contrib.admin",
    "django.contrib.auth",
    "django.contrib.contenttypes",
    "django.contrib.sessions",
    "django.contrib.messages",
    "django.contrib.staticfiles",
    # --------------------------------
    "rest_framework",
    "corsheaders",
    # --------------------------------
    "access",
    "utility",
]

MIDDLEWARE = [
    "django.middleware.security.SecurityMiddleware",
    "django.contrib.sessions.middleware.SessionMiddleware",
    "django.middleware.common.CommonMiddleware",
    "django.middleware.csrf.CsrfViewMiddleware",
    "django.contrib.auth.middleware.AuthenticationMiddleware",
    "django.contrib.messages.middleware.MessageMiddleware",
    "django.middleware.clickjacking.XFrameOptionsMiddleware",
    # ----------------------------------------------------------
    "corsheaders.middleware.CorsMiddleware",
]

ROOT_URLCONF = "api.urls"

TEMPLATES = [
    {
        "BACKEND": "django.template.backends.django.DjangoTemplates",
        "DIRS": [
            os.path.join(BASE_DIR, "templates"),
        ],
        "APP_DIRS": True,
        "OPTIONS": {
            "context_processors": [
                "django.template.context_processors.debug",
                "django.template.context_processors.request",
                "django.contrib.auth.context_processors.auth",
                "django.contrib.messages.context_processors.messages",
            ],
        },
    },
]

WSGI_APPLICATION = "api.wsgi.application"

AUTH_PASSWORD_VALIDATORS = [
    {
        "NAME": "django.contrib.auth.password_validation.UserAttributeSimilarityValidator",
    },
    {
        "NAME": "django.contrib.auth.password_validation.MinimumLengthValidator",
    },
    {
        "NAME": "django.contrib.auth.password_validation.CommonPasswordValidator",
    },
    {
        "NAME": "django.contrib.auth.password_validation.NumericPasswordValidator",
    },
]

LANGUAGE_CODE = "en-us"
USE_TZ = False
TIME_ZONE = "Asia/Kolkata"
USE_I18N = True

STATIC_URL = "static/"
DEFAULT_AUTO_FIELD = "django.db.models.BigAutoField"
STATIC_URL = "/static/"
STATIC_ROOT = os.path.join(BASE_DIR, "static")
STATICFILES_DIRS = [
    os.path.join(BASE_DIR, "staticfiles"),
]
MEDIA_URL = "/media/"
MEDIA_ROOT = os.path.join(BASE_DIR, "media")
DATA_UPLOAD_MAX_MEMORY_SIZE = 1048576 * 10  # 10MB

CORS_ORIGIN_ALLOW_ALL = True
CORS_ALLOW_CREDENTIALS = True
CORS_ALLOW_HEADERS = [
    "accept",
    "accept-encoding",
    "dnt",
    "origin",
    "user-agent",
    "x-csrftoken",
    "x-requested-with",
    # -----------------
    "authorization",
    "content-type",
    "Access-Control-Allow-Origin",
]

# DATABASE_ROUTERS = (
#     "databases.auth.Django_Auth_Router",
#     "databases.app.App_Router",
# )

REFRESH_TOKEN_LIMIT = 7  # Days
ACCESS_TOKEN_LIMIT = 120  # Minutes

# --------------------------------------------------------------------------
# CODE
# --------------------------------------------------------------------------
try:
    with open(os.path.join(BASE_DIR, "config", "server.json"), "r") as secret_file:
        data = json.load(secret_file)[SYSTEM]
        SECRET_KEY = data["SECRET"]
        DEBUG = data["DEBUG"]
        ALLOWED_HOSTS = data["ALLOWED_HOSTS"]
        DATABASES = data["DATABASES"]
        del data
except FileNotFoundError:
    print(
        """[x] Security CONFIG file missing.\n
            [x] Contact ADMIN."""
    )
    exit(0)
else:
    DATABASES["default"]["NAME"] = os.path.join(BASE_DIR, "database", DATABASES["default"]["NAME"])
